# ---------------------------------------------------------------------------
# Command: /tech-debt
#
# Description:
#   Calls the Gemini CLI to identify and prioritize technical debt.
#
# Usage Examples:
#
#   1. Run a general analysis:
#      /tech-debt
#
#   2. Focus on a specific severity:
#      /tech-debt focusing on critical severity issues
# ---------------------------------------------------------------------------

name = "tech-debt"
description = "Identify and prioritize technical debt across the codebase"

prompt = """
`gemini --all_files -p "Identify and analyze technical debt in this codebase. {{args}}

**Technical Debt Analysis:**

1.  **Code Debt**: Outdated patterns, TODOs, commented-out code, workarounds.
2.  **Architecture Debt**: Inconsistencies, tight coupling, circular dependencies.
3.  **Technology Debt**: Outdated dependencies, legacy code, security vulnerabilities.
4.  **Documentation Debt**: Missing or outdated docs, unclear APIs.
5.  **Test Debt**: Missing coverage, brittle tests, slow test suites.
6.  **Performance Debt**: Known bottlenecks, inefficient algorithms, missing caching.

**Debt Prioritization Matrix:**
For each debt item identified:
- ðŸ”´ Critical (fix immediately)
- ðŸŸ  High (fix within sprint)
- ðŸŸ¡ Medium (fix within quarter)
- ðŸŸ¢ Low (fix when convenient)

**Impact Assessment:**
- Development velocity impact
- Maintenance burden
- Security/reliability risks
- Performance implications

**Remediation Plan:**
- Quick wins (< 1 day effort)
- Short-term fixes (1-5 days)
- Long-term refactoring (weeks/months)
- Estimated effort for each major item"`
"""
