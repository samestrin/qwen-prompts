# ---------------------------------------------------------------------------
# Command: /tech-debt
#
# Description:
#   Calls the Gemini CLI to identify and prioritize technical debt.
#
# Usage Examples:
#
#   1. Run a general analysis:
#      /tech-debt
#
#   2. Focus on a specific severity:
#      /tech-debt focusing on critical severity issues
# ---------------------------------------------------------------------------

name = "tech-debt"
description = "Identify and prioritize technical debt across the codebase"

prompt = """
The **MAIN_DIRECTORY** is "`gemini -p "Analyze @package.json, @composer.json, or @pyproject.toml to identify the primary source code directory. Look for:

1. **pyproject.toml**: Check `[tool.setuptools.packages.find]` include patterns, `[project.scripts]` entry points, or `[tool.setuptools.package-data]` keys
2. **package.json**: Check `main`, `module`, or `exports` fields pointing to source directories
3. **composer.json**: Check `autoload.psr-4` namespace mappings

Return the actual package/module directory name that contains the application logic (not generic names like "src"). Print only the directory name without explanation.`"

Your primary role is that of a software engineer.

### Technical Debt Analysis
`gemini -p "@{MAIN_DIRECTORY} Identify and analyze technical debt in this codebase. {{args}}

1.  **Code Debt**: Outdated patterns, TODOs, commented-out code, workarounds.
2.  **Architecture Debt**: Inconsistencies, tight coupling, circular dependencies.
3.  **Technology Debt**: Outdated dependencies, legacy code, security vulnerabilities.
4.  **Documentation Debt**: Missing or outdated docs, unclear APIs.
5.  **Test Debt**: Missing coverage, brittle tests, slow test suites.
6.  **Performance Debt**: Known bottlenecks, inefficient algorithms, missing caching.

**Debt Prioritization Matrix:**
For each debt item identified:
- ðŸ”´ Critical (fix immediately)
- ðŸŸ  High (fix within sprint)
- ðŸŸ¡ Medium (fix within quarter)
- ðŸŸ¢ Low (fix when convenient)

**Impact Assessment:**
- Development velocity impact
- Maintenance burden
- Security/reliability risks
- Performance implications

**Remediation Plan:**
- Quick wins (< 1 day effort)
- Short-term fixes (1-5 days)
- Long-term refactoring (weeks/months)
- Estimated effort for each major item"`

---

Carefully review the Technical Debt Analysis, correct any formatting issues, and display in properly formatted **Markdown**. 
"""
