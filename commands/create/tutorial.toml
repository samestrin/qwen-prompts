# ---------------------------------------------------------------------------
# Command: /create:tutorial
#
# Description:
#   Calls the Gemini CLI to analyzes any codebase and creates comprehensive, 
#   practical tutorials with real working examples.
#
# Usage Examples:
#
#   1. Feature implementation tutorial:
#      /create:tutorial Create a tutorial on implementing user authentication
#
#   2. Setup and configuration tutorial:
#      /create:tutorial Create a beginner's guide to setting up the development environment
#
#   3. Architecture explanation tutorial:
#      /create:tutorial Explain the microservices architecture used in this project
#
#   4. Testing tutorial:
#      /create:tutorial Create a tutorial on writing and running tests for this application
# ---------------------------------------------------------------------------

name = "create:tutorial"
description = "Generate comprehensive tutorials from any codebase"

prompt = """
The **THIS_DATE** is "`date`"

# Directory Detection

The **MAIN_DIRECTORIES** is "`gemini -p "Analyze @package.json, @composer.json, or @pyproject.toml to identify the primary source code directory. Look for:

1. **pyproject.toml**: Check `[tool.setuptools.packages.find]` include patterns, `[project.scripts]` entry points, or `[tool.setuptools.package-data]` keys
2. **package.json**: Check `main`, `module`, or `exports` fields pointing to source directories
3. **composer.json**: Check `autoload.psr-4` namespace mappings

Return the _actual package/module directory name(s)_ that contains the _application logic_ (do not _assume_ generic names like \"src\"). 

Print only the {MAIN_DIRECTORIES} directory name(s) without explanation with each directory name preceeded by **@** example **@src**.`"

`gemini -p "{MAIN_DIRECTORIES} Analyze this codebase and create a comprehensive tutorial. {{args}}

**ANALYSIS REQUIREMENTS:**
First, examine the project structure, dependencies, documentation, and code patterns to understand:
- Technology stack and frameworks used
- Architecture patterns and design principles
- Storage systems, databases, and external services
- Build tools, package managers, and deployment methods
- Testing frameworks and development workflows
- System dependencies and platform requirements

**TUTORIAL STRUCTURE:**

1.  **Introduction**
    - What the user will learn and accomplish
    - Why this knowledge/skill is valuable
    - Brief overview of the technology stack

2.  **Prerequisites**
    - Required knowledge level and background
    - System requirements and platform compatibility
    - Tools, software, and accounts needed
    - Dependencies and build tools (including system-level requirements)

3.  **Environment Setup**
    - Step-by-step installation instructions
    - Package manager setup and dependency installation
    - Configuration file setup with real examples
    - Verification steps to confirm proper setup

4.  **Step-by-Step Implementation**
    - Clear, numbered steps with explanations
    - Real code examples from the actual project
    - Configuration snippets and file contents
    - Command-line instructions with expected outputs

5.  **Common Issues & Troubleshooting**
    - Typical installation and setup problems
    - Platform-specific considerations
    - Error messages and their solutions
    - Debugging techniques and tools

6.  **Advanced Configuration**
    - Optional features and customizations
    - Performance optimization tips
    - Security best practices
    - Production deployment considerations

7.  **Testing & Validation**
    - How to verify the implementation works
    - Running tests and interpreting results
    - Manual testing procedures
    - Performance and functionality checks

8.  **Next Steps & Resources**
    - Suggested follow-up learning paths
    - Related documentation and guides
    - Community resources and support channels
    - Advanced topics for further exploration

**QUALITY REQUIREMENTS:**
- Use actual file paths, function names, and code snippets from the project
- Include all storage systems, databases, and external services found in the codebase
- Mention all dependencies from package files (requirements.txt, package.json, etc.)
- Reference actual configuration files and environment variables
- Provide working command-line examples with realistic parameters
- Ensure all steps are actionable and testable
- Include platform-specific instructions where relevant

The tutorial must be immediately usable by someone following it step-by-step."`

---

Carefully review the output and correct any formatting issues that may have occured in the generation of the tutorial. 
Include/Add "Created: {THIS_DATE}" on the line after the title.

Then **hard stop**.
"""
