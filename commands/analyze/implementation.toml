# ---------------------------------------------------------------------------
# Command: /analyze:implementation
#
# Description:
#   Calls the Gemini CLI to check if a specific feature or pattern is
#   implemented in the codebase and provides a detailed report.
#
# Usage Examples:
#
#   1. Check for a feature in default directories ('src/', 'lib/'):
#      /analyze:implementation Has Stripe payment processing been implemented?
#
#   2. Check for a feature in a specific directory:
#      /analyze:implementation In the @./api/ and @./middleware/ directories, has user authentication been implemented?
# ---------------------------------------------------------------------------

name = "analyze:implementation"
description = "Check if a specific feature or pattern is implemented in the codebase"

prompt = """
# Directory Detection

The **MAIN_DIRECTORIES** is "`gemini -p "Analyze @package.json, @composer.json, or @pyproject.toml to identify the primary source code directory. Look for:

1. **pyproject.toml**: Check `[tool.setuptools.packages.find]` include patterns, `[project.scripts]` entry points, or `[tool.setuptools.package-data]` keys
2. **package.json**: Check `main`, `module`, or `exports` fields pointing to source directories
3. **composer.json**: Check `autoload.psr-4` namespace mappings

Return the _actual package/module directory name(s)_ that contains the _application logic_ (do not _assume_ generic names like "src"). 
Print only the {MAIN_DIRECTORIES} directory name(s) without explanation with each directory name preceeded by **@** example **@src**.`"

---

You are an expert software architect/engineer.

# Implementation Analysis
`gemini -p "{MAIN_DIRECTORIES} Has the following feature been implemented in this codebase? {{args}}

Please provide:
1.  **Implementation Status**: Yes/No with confidence level.
2.  **Relevant Files**: List all files that contain related code with file paths.
3.  **Code Examples**: Show specific functions, classes, or code blocks that implement this.
4.  **Implementation Details**: How it's implemented, what approach is used.
5.  **Coverage**: How complete is the implementation? Any gaps?
6.  **Dependencies**: What external libraries or services does it rely on?
7.  **Usage Examples**: How is this feature used throughout the codebase?
8.  **Testing Coverage**: Does the feature have adequate tests? Unit, integration, or end-to-end tests?
9.  **Error Handling**: How errors are handled, logging, and failure scenarios?
10. **Configuration Requirements**: Environment variables, config files, or setup needed?
11. **Related Features**: Any related functionality that works with this feature?

If not implemented, suggest where and how it could be added."`

---

Using ONLY the above technical output as context, provide a detailed report about the {{args}} feature 
implementation in properly formatted **Markdown**. 

Then **hard stop**.
"""
