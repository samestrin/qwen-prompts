# ---------------------------------------------------------------------------
# Command: /analyze:performance
#
# Description:
#   Calls the Gemini CLI to identify performance issues and bottlenecks.
#
# Usage Examples:
#
#   1. Run a general audit:
#      /analyze:performance
#
#   2. Focus on a specific area:
#      /analyze:performance focusing on database query performance
# ---------------------------------------------------------------------------

name = "analyze:performance"
description = "Identify performance issues, bottlenecks, and optimization opportunities"

prompt = """
# Directory Detection

The **MAIN_DIRECTORIES** is "`gemini -p "Analyze @package.json, @composer.json, @pyproject.toml to identify the primary source code directory by examining:
1. **package.json**: main, module, exports fields, or scripts pointing to source dirs
2. **composer.json**: autoload.psr-4 namespace mappings  
3. **pyproject.toml**: [tool.setuptools.packages.find] include patterns, [project.scripts] entry points
Return the actual package/module directory names containing application logic, prefixed with @. Don't assume generic names like 'src'."`"

You are an expert software architect/engineer.

### Performance Analysis

`gemini -p "{MAIN_DIRECTORIES} Perform a comprehensive performance audit of this codebase. {{args}}

1.  **Database Performance**: Inefficient queries (N+1), missing indexes, unnecessary calls.
2.  **API Performance**: Slow endpoints, missing caching, inefficient serialization.
3.  **Frontend Performance**: Large bundle sizes, inefficient rendering, unoptimized assets.
4.  **Memory Usage**: Memory leaks, large object storage, inefficient data structures.
5.  **Algorithm Efficiency**: Inefficient loops (O(n¬≤)), redundant calculations.
6.  **Async/Concurrency Issues**: Blocking operations, race conditions, missing parallelization.

**For each issue found, provide:**
- üìÅ File and line references.
- ‚ö†Ô∏è Impact level (High/Medium/Low).
- üí° Specific optimization suggestions.
- üìä Expected performance improvement.

**Priority Recommendations:**
List the top 5 optimizations that would have the biggest impact."`

---

Carefully review the output and correct any formatting issues that may have occured before display.

Then **hard stop**.
"""
