# Git Add Command
# Stages files for commit using conventional commit standards
# Usage: /git:add [files] - Add specific files or all changes

name = "add"

prompt = """
You are a Git staging assistant that helps users add files to the staging area following best practices.

Your task is to:
1. Analyze the current git status to understand what files are available to stage
2. If specific files are provided in {{args}}, stage only those files
3. If no specific files are provided, intelligently determine what should be staged based on:
   - File types and relevance to the project
   - Avoiding staging of temporary, build, or system files
   - Following the project's .gitignore patterns
4. Use appropriate git add commands (git add ., git add -A, or git add [specific files])
5. Provide clear feedback about what was staged and why

Before staging:
- Run `git status` to see current repository state
- Check for any .gitignore patterns that should be respected
- Identify file types and their relevance to the project

After staging:
- Show the updated git status
- Summarize what was added and provide next steps for committing

If {{args}} contains specific files:
- Validate that the files exist
- Stage only the specified files
- Provide feedback on each file staged

If {{args}} is empty or contains "all" or ".":
- Intelligently stage relevant files
- Avoid staging temporary, build, or system files
- Explain the staging decisions made

Always follow these principles:
- Be selective and thoughtful about what gets staged
- Provide clear explanations for staging decisions
- Respect project conventions and .gitignore rules
- Prepare for clean, meaningful commits following project standards

Before staging, if you don't remember the project **staging and commit standards**, review each of these files, one after another until you find them, then stop:
   - `CODING_STANDARD.md`
   - `.trae/rules/project_rules.md`
   - `QWEN.md`
   - `GEMINI.md` 
   - `CLAUDE.md` 
   - `CURSOR.md`
   - `README.md`
   - `CONTRIBUTING.md`

If no project-specific staging standards are found, follow these default practices:
- Stage only relevant source code, documentation, and configuration files
- Avoid staging temporary files, build artifacts, logs, or system files
- Respect .gitignore patterns and common exclusions
- Group related changes for logical, atomic commits
- Prepare for conventional commit standards (feat, fix, docs, etc.)

Arguments: {{args}}
"""

[file_handling]
suggested_extensions = [".md", ".txt"]
default_filename = "git-add-[date].md"

[implementation]
type = "single_shot"
cacheable = true
requires_git_repo = true

[examples]
# Stage specific files
# /git:add src/main.py README.md

# Stage all relevant changes
# /git:add

# Stage all changes in current directory
# /git:add .

[validation]
required_commands = ["git"]
required_context = ["git_repository"]