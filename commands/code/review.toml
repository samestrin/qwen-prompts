# ---------------------------------------------------------------------------
# Command: /code:review
#
# Description:
#   Calls the Gemini CLI to perform a comprehensive code review,
#   analyzing code quality, security, performance, and best practices.
#
# Usage Examples:
#
#   1. Review the entire codebase:
#      /code:review
#
#   2. Review specific files or directories:
#      /code:review @src/auth/ @src/api/
#
#   3. Focus on specific aspects:
#      /code:review focusing on security vulnerabilities and performance issues
# ---------------------------------------------------------------------------

name = "code:review"
description = "Perform comprehensive code review analyzing quality, security, performance, and best practices"

prompt = """
# Comprehensive Code Review Analysis

## Method 1: Package File Analysis
The **PACKAGE_DIRS** is "`gemini -p "Analyze @package.json, @composer.json, @pyproject.toml, @Cargo.toml, @go.mod to identify primary source directories. Look for:
1. **pyproject.toml**: Check [tool.setuptools.packages.find] include patterns, [project.scripts] entry points
2. **package.json**: Check main, module, exports fields, or scripts pointing to source dirs
3. **composer.json**: Check autoload.psr-4 namespace mappings
4. **Cargo.toml**: Check [bin] or [lib] sections for source paths
5. **go.mod**: Infer from module name and common Go patterns
Return actual directory names (not generic like 'src'), one per line. Return empty if none found.`"

## Method 2: Common Source Directory Patterns
The **PATTERN_DIRS** is "`find . -maxdepth 2 -type d \\( -name src -o -name app -o -name lib -o -name components -o -name packages -o -name modules -o -name cmd -o -name internal -o -name pkg \\) 2>/dev/null | grep -v node_modules | grep -v .git | grep -v dist | grep -v build | sed 's|^\\.||' | head -5 | tr '\\n' ' '`"

## Method 3: Code Density Analysis  
The **DENSITY_DIRS** is "`find . -maxdepth 3 -type f \\( -name '*.py' -o -name '*.js' -o -name '*.ts' -o -name '*.tsx' -o -name '*.php' -o -name '*.go' -o -name '*.rs' -o -name '*.java' -o -name '*.cpp' -o -name '*.c' \\) 2>/dev/null | grep -v node_modules | grep -v .git | grep -v dist | grep -v build | grep -v __pycache__ | sed 's|/[^/]*$||' | sort | uniq -c | sort -nr | head -3 | awk '$1 >= 3 {print $2}' | sed 's|^\\.||' | tr '\\n' ' '`"

## Directory Combination Logic
The **COMBINED_DIRS** is "`echo \"$PACKAGE_DIRS $PATTERN_DIRS $DENSITY_DIRS\" | tr ' ' '\\n' | grep -v '^$' | sort | uniq | head -5 | tr '\\n' ' '`"

## Final Formatted Output
The **MAIN_DIRECTORIES** is "`if [ -n \"$COMBINED_DIRS\" ]; then echo \"$COMBINED_DIRS\" | tr ' ' '\\n' | grep -v '^$' | sed 's/^/@/' | tr '\\n' ' ' | sed 's/ $//' | tr ' ' ' '; else echo '@.'; fi`"

---

You are an expert senior software engineer and code reviewer.

# Comprehensive Code Review
`gemini -p "{MAIN_DIRECTORIES} Perform a comprehensive code review of this codebase. {{args}}

Your review should include:

### 1. Code Quality Analysis
- **Code Structure**: Architecture patterns, modularity, separation of concerns
- **Naming Conventions**: Variables, functions, classes, files consistency
- **Code Complexity**: Cyclomatic complexity, nested logic, function length
- **DRY Principle**: Code duplication identification and refactoring opportunities
- **SOLID Principles**: Single responsibility, open/closed, dependency inversion adherence

### 2. Security Review
- **Input Validation**: SQL injection, XSS, CSRF protection
- **Authentication & Authorization**: Proper implementation, session management
- **Data Handling**: Sensitive data exposure, encryption, secure storage
- **Dependencies**: Known vulnerabilities in third-party packages
- **API Security**: Rate limiting, input sanitization, error handling

### 3. Performance Analysis
- **Database Queries**: N+1 problems, indexing, query optimization
- **Memory Usage**: Memory leaks, inefficient data structures
- **Algorithm Efficiency**: Time complexity, unnecessary computations
- **Caching Strategies**: Implementation and effectiveness
- **Resource Management**: File handles, connections, cleanup

### 4. Best Practices Compliance
- **Error Handling**: Proper exception handling, logging, user feedback
- **Testing**: Unit tests, integration tests, test coverage
- **Documentation**: Code comments, API documentation, README files
- **Version Control**: Commit messages, branching strategy, code organization
- **Configuration Management**: Environment variables, secrets handling

### 5. Maintainability Assessment
- **Code Readability**: Clear logic flow, appropriate comments
- **Refactoring Opportunities**: Technical debt identification
- **Scalability Concerns**: Performance bottlenecks, architectural limitations
- **Dependency Management**: Outdated packages, unnecessary dependencies

### 6. Language/Framework Specific Issues
- **Language Idioms**: Proper use of language features and conventions
- **Framework Best Practices**: Correct usage of chosen frameworks
- **Type Safety**: Static typing usage, null safety

For each issue identified:
- Provide specific file and line references
- Explain the problem and its impact
- Suggest concrete solutions with code examples when applicable
- Assign severity level (Critical/High/Medium/Low)

Focus on actionable feedback that will improve code quality, security, and maintainability.`

---

Using ONLY the above code review analysis as context, provide a comprehensive code review report in properly formatted **Markdown**.

**IMPORTANT: Structure the report in DESCENDING ORDER OF SEVERITY:**

## üö® CRITICAL ISSUES (Blockers)
*Security vulnerabilities, major bugs, system-breaking issues*

## ‚ö†Ô∏è HIGH PRIORITY ISSUES  
*Performance problems, significant maintainability issues, data integrity concerns*

## üî∂ MEDIUM PRIORITY ISSUES
*Code quality improvements, minor refactoring opportunities, moderate technical debt*

## üìù LOW PRIORITY ISSUES
*Style improvements, documentation updates, minor optimizations*

For each severity level, group issues by category (Security, Performance, Code Quality, etc.) and provide specific file references and actionable solutions.

Then **hard stop**.
"""