# ---------------------------------------------------------------------------
# Command: /code:analysis
#
# Description:
#   Calls the Gemini CLI to perform a high-level analysis of a codebase,
#   detailing its architecture, tech stack, and key components.
#
# Usage Examples:
#
#   1. Analyze the current directory:
#      /code:analysis
#
#   2. Analyze a specific directory:
#      /code:analysis analyzing the @server/api/ directory
# ---------------------------------------------------------------------------

name = "code:analysis"
description = "Analyze entire codebase architecture and structure using Gemini's large context window"

prompt = """
# Comprehensive Directory Detection

## Method 1: Package File Analysis
The **PACKAGE_DIRS** is "`gemini -p "Analyze @package.json, @composer.json, @pyproject.toml, @Cargo.toml, @go.mod to identify primary source directories. Look for:
1. **pyproject.toml**: Check [tool.setuptools.packages.find] include patterns, [project.scripts] entry points
2. **package.json**: Check main, module, exports fields, or scripts pointing to source dirs
3. **composer.json**: Check autoload.psr-4 namespace mappings
4. **Cargo.toml**: Check [bin] or [lib] sections for source paths
5. **go.mod**: Infer from module name and common Go patterns
Return actual directory names (not generic like 'src'), one per line. Return empty if none found.`"

## Method 2: Common Source Directory Patterns
The **PATTERN_DIRS** is "`find . -maxdepth 2 -type d \\( -name src -o -name app -o -name lib -o -name components -o -name packages -o -name modules -o -name cmd -o -name internal -o -name pkg \\) 2>/dev/null | grep -v node_modules | grep -v .git | grep -v dist | grep -v build | sed 's|^\\.||' | head -5 | tr '\\n' ' '`"

## Method 3: Code Density Analysis  
The **DENSITY_DIRS** is "`find . -maxdepth 3 -type f \\( -name '*.py' -o -name '*.js' -o -name '*.ts' -o -name '*.tsx' -o -name '*.php' -o -name '*.go' -o -name '*.rs' -o -name '*.java' -o -name '*.cpp' -o -name '*.c' \\) 2>/dev/null | grep -v node_modules | grep -v .git | grep -v dist | grep -v build | grep -v __pycache__ | sed 's|/[^/]*$||' | sort | uniq -c | sort -nr | head -3 | awk '$1 >= 3 {print $2}' | sed 's|^\\.||' | tr '\\n' ' '`"

## Directory Combination Logic
The **COMBINED_DIRS** is "`echo \"$PACKAGE_DIRS $PATTERN_DIRS $DENSITY_DIRS\" | tr ' ' '\\n' | grep -v '^$' | sort | uniq | head -5 | tr '\\n' ' '`"

## Final Formatted Output
The **MAIN_DIRECTORIES** is "`if [ -n \"$COMBINED_DIRS\" ]; then echo \"$COMBINED_DIRS\" | tr ' ' '\\n' | grep -v '^$' | sed 's/^/@/' | tr '\\n' ' ' | sed 's/ $//' | tr ' ' ' '; else echo '@.'; fi`"

---

You are an expert technical consultant providing professional code assessments.

# Code Analysis
`gemini -p "{MAIN_DIRECTORIES} Perform a comprehensive technical analysis of this codebase. {{args}}

1. **Project Overview**: Purpose, domain, target users, business context.
2. **Architecture & Design Patterns**: High-level architecture, design patterns used, architectural decisions.
3. **Technology Stack**: Languages, frameworks, libraries, databases, external services.
4. **File & Module Structure**: Directory organization, module relationships, entry points.
5. **Code Quality**: Readability, maintainability, consistency, documentation coverage.
6. **Performance Considerations**: Bottlenecks, optimization opportunities, scalability concerns.
7. **Testing Strategy**: Test coverage, testing frameworks, test quality and organization.
8. **Security Assessment**: Security practices, potential vulnerabilities, authentication/authorization.
9. **Configuration & Environment**: Environment setup, configuration management, deployment considerations.
10. **Dependencies & Package Management**: Dependency analysis, version management, security of dependencies.
11. **Areas for Improvement**: Technical debt, refactoring opportunities, modernization suggestions.
12. **Development Workflow**: Build process, CI/CD, development tools, code standards.

**For each area, provide:**
- ‚úÖ Strengths and well-implemented aspects.
- ‚ö†Ô∏è Areas of concern or potential issues.
- üí° Specific recommendations for improvement.
- üìÅ Relevant files and code examples.
- üéØ Priority level for addressing issues (High/Medium/Low).`

---

# Output Format Selection

**Check for --comprehensive flag in arguments:**
- If `--comprehensive` is present in {{args}}, provide technical Markdown output
- Otherwise, provide professional technical assessment report

## Professional Technical Assessment (Default)

Using ONLY the above technical analysis as context, provide a **professional technical assessment report** formatted for technical leads, architects, and stakeholders:

### Executive Summary
- Project overview and technical maturity assessment
- Key architectural strengths and concerns
- Overall code quality and maintainability rating
- Critical recommendations requiring immediate attention

### Technical Architecture
**Architecture Overview**
- System design and architectural patterns
- Technology stack evaluation
- Scalability and performance characteristics

**Design Quality**
- Code organization and modularity
- Design pattern implementation
- Separation of concerns

### Code Quality Assessment
**Strengths**
- Well-implemented features and practices
- Code quality highlights

**Areas for Improvement**
- Technical debt identification
- Code quality concerns
- Maintainability issues

### Risk Assessment
**High Priority Issues** (Immediate Attention)
- Critical technical risks
- Performance bottlenecks
- Security concerns

**Medium Priority Issues** (Next Sprint/Quarter)
- Moderate technical debt
- Optimization opportunities

**Low Priority Issues** (Future Considerations)
- Minor improvements
- Enhancement opportunities

### Technology & Dependencies
- Technology stack assessment
- Dependency analysis and recommendations
- Upgrade and modernization opportunities

### Development Process
- Testing strategy evaluation
- CI/CD and deployment assessment
- Development workflow recommendations

### Recommendations
- Prioritized action plan
- Resource requirements
- Implementation roadmap
- Success metrics

## Technical Analysis (--comprehensive flag)

If `--comprehensive` flag is detected, instead provide the detailed technical analysis in properly formatted **Markdown** with comprehensive technical findings, code references, and implementation details.

Then **hard stop**.
"""

