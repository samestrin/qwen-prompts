# ---------------------------------------------------------------------------
# Command: /strategy:extract-business-logic
#
# Description:
#   Calls the Gemini CLI to scan the codebase and document all
#   business rules and application logic in plain English.
#
# Usage Examples:
#
#   1. Run on the entire codebase:
#      /strategy:extract-business-logic
# ---------------------------------------------------------------------------

name = "strategy:extract-business-logic"
description = "Extract and document business rules and logic from code"

prompt = """
# Directory Detection

The **MAIN_DIRECTORIES** is "`gemini -p "Analyze @package.json, @composer.json, @pyproject.toml to identify the primary source code directory by examining:
1. **package.json**: main, module, exports fields, or scripts pointing to source dirs
2. **composer.json**: autoload.psr-4 namespace mappings  
3. **pyproject.toml**: [tool.setuptools.packages.find] include patterns, [project.scripts] entry points
Return the actual package/module directory names containing application logic, prefixed with @. Don't assume generic names like 'src'."`"

You are an expert software architect/engineer.

### Business Logic Documentation
`gemini -p "{MAIN_DIRECTORIES} Extract all business logic and rules from this codebase:

1.  **Core Business Rules**: What business rules are encoded in the software?
2.  **Validation Logic**: Data validation rules and constraints.
3.  **Workflow Logic**: Process flows and state transitions.
4.  **Calculation Logic**: Formulas, algorithms, and pricing rules.
5.  **Authorization Rules**: Who can do what and when.
6.  **Integration Logic**: How different systems or services interact.

For each rule:
- Plain English description
- File location and implementation
- Dependencies and related rules
- Edge cases and exceptions"`

---

Carefully review the Business Logic Documentation, correct any formatting issues, and display in properly formatted **Markdown**. 

Then **hard stop**.
"""
