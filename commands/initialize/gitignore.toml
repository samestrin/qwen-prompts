# ---------------------------------------------------------------------------
# Command: /initialize:gitignore
#
# Description:
#   Generates a comprehensive .gitignore file for the specified programming
#   language or framework. Creates or updates the .gitignore file with
#   appropriate patterns for the given technology stack.
#
# Usage Examples:
#
#   1. Create .gitignore for Python projects:
#      /initialize:gitignore python
#
#   2. Create .gitignore for Node.js projects:
#      /initialize:gitignore node
#
#   3. Create .gitignore for multiple languages:
#      /initialize:gitignore python,node,react
#
#   4. Create .gitignore for specific frameworks:
#      /initialize:gitignore django
#      /initialize:gitignore nextjs
#      /initialize:gitignore vue
# ---------------------------------------------------------------------------

name = "initialize:gitignore"
description = "Generates language-specific .gitignore files for projects"

prompt = """
Generate a comprehensive .gitignore file for the specified language(s) or framework(s).

**Target Language(s)/Framework(s)**: {{args}}

### Language/Framework Detection and Processing

Parse the provided arguments to determine which .gitignore patterns to include:

**Supported Languages and Frameworks**:
- **Python**: python, py, django, flask, fastapi, jupyter
- **JavaScript/Node.js**: javascript, js, node, nodejs, npm, yarn
- **React**: react, reactjs, nextjs, gatsby
- **Vue**: vue, vuejs, nuxt, nuxtjs
- **Angular**: angular, ng
- **TypeScript**: typescript, ts
- **Java**: java, maven, gradle, spring, springboot
- **C#/.NET**: csharp, dotnet, net, aspnet
- **Go**: go, golang
- **Rust**: rust, cargo
- **PHP**: php, composer, laravel, symfony
- **Ruby**: ruby, rails, gem
- **Swift**: swift, ios, xcode
- **Kotlin**: kotlin, android
- **C/C++**: c, cpp, cmake, make
- **Docker**: docker, dockerfile
- **Database**: mysql, postgresql, sqlite, mongodb
- **IDE/Editors**: vscode, intellij, eclipse, vim, emacs
- **OS**: windows, macos, linux
- **Cloud**: aws, azure, gcp, terraform

### .gitignore Generation Process

1. **Analyze Input**: Parse {{args}} to identify all requested languages/frameworks
2. **Base Patterns**: Start with common patterns (logs, temp files, etc.)
3. **Language-Specific Patterns**: Add patterns for each identified technology
4. **IDE/OS Patterns**: Include common IDE and OS-specific ignore patterns
5. **Project Structure**: Add patterns for common project artifacts

### .gitignore Content Structure

```gitignore
# =============================================================================
# .gitignore for {{args}}
# Generated by qwen-prompts /initialize:gitignore
# =============================================================================

# Common Files and Directories
*.log
*.tmp
*.temp
.DS_Store
Thumbs.db
.env
.env.local
.env.*.local

# IDE and Editor Files
.vscode/
.idea/
*.swp
*.swo
*~

# Language-Specific Patterns
[Include patterns based on detected languages]

# Framework-Specific Patterns
[Include patterns based on detected frameworks]

# Build and Distribution
/dist/
/build/
/out/

# Dependencies
node_modules/
*.egg-info/
__pycache__/

# Testing
coverage/
.coverage
.pytest_cache/
.nyc_output/

# Documentation
/docs/_build/

# Project-Specific (customize as needed)
# Add your project-specific patterns here
```

### Language-Specific Pattern Examples

**Python**:
```gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
PIPFILE.lock

# Virtual Environments
venv/
env/
ENV/
.venv/
.env/

# Jupyter Notebook
.ipynb_checkpoints

# Django
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
media/
staticfiles/
```

**Node.js/JavaScript**:
```gitignore
# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out/

# Nuxt.js build / generate output
.nuxt
dist
```

**Java**:
```gitignore
# Java
*.class
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar

# Gradle
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

# IntelliJ IDEA
.idea/
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/
```

### Implementation Instructions

1. **Parse Arguments**: Identify all languages/frameworks from {{args}}
2. **Create/Update .gitignore**: 
   - If .gitignore exists, backup and update
   - If .gitignore doesn't exist, create new file
3. **Include Comprehensive Patterns**: Add all relevant patterns for detected technologies
4. **Organize Sections**: Group patterns logically with clear comments
5. **Add Customization Section**: Include space for project-specific patterns
6. **Validate Patterns**: Ensure no conflicting or redundant patterns

### Success Criteria

- .gitignore file is created or updated successfully
- All relevant patterns for specified languages/frameworks are included
- File is well-organized with clear section headers
- Common IDE and OS patterns are included
- File includes customization section for project-specific needs
- Backup of existing .gitignore is created if file already exists

### Error Handling

- If unsupported language is specified, provide suggestions for similar supported languages
- If .gitignore already exists, create backup before updating
- Validate that generated patterns are syntactically correct
- Provide clear feedback on what was added to .gitignore

Generate the .gitignore file now based on the specified language(s)/framework(s).
"""